<style>
    .new {
        height: auto;
        position: relative;
        top: 100px;
    }

    #back {
        margin-bottom: 20px;
        font-size: 20px;
        font-weight: 500;
    }

    .add {
        margin-top: 20px;
    }
    .btn-primary{
        color: white !important;
        margin-top: 10px;
    }

    .new {
        height: auto;
        position: relative;
        top: 100px;
    }

    #back {
        margin-bottom: 20px;
        font-size: 20px;
        font-weight: 500;
    }

    .add {
        margin-top: 20px;
    }

    .btn-primary {
        color: white !important;
        margin-top: 10px;
        margin-right: 10px; /* Added space between buttons */
    }

    .btn-main {
        margin-top: 10px; /* Ensure consistent top margin */
    }


</style>
<div class="bg0 m-t-23 p-b-140 new">
    <section class="order-details page-wrapper">
        <div class="container">
            <a id="back" href="/get/orders">Back</a>
            <div class="row">
                <div class="col-md-12">

                    <div class="dashboard-wrapper user-dashboard">
                        <div class="order-details-content">
                            <h3>Order Details</h3>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Date</th>
                                        <th>Total Items</th>
                                        <th>Total Price</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>#{{order._id}}</td>
                                        <td>{{formatDate order.createdAt}}</td>
                                        <td>{{order.items.length}}</td>

                                        <td>₹{{order.totalAmount}}</td>
                                        <td><span
                                                class="label label-{{order.orderStatus}} btn btn-primary">{{order.orderStatus}}</span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <h4>Items in this Order</h4>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Size</th>
                                        <th>Price</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#each order.items}}
                                    <tr>
                                        <td>{{this.product.name}}</td>
                                        <td>{{this.quantity}}</td>
                                        <td>{{this.size}}</td>
                                        <td>₹{{this.price}}</td>
                                        <td>₹{{multiply this.quantity this.price}}</td>
                                    </tr>
                                    {{/each}}
                                </tbody>
                            </table>
                            <h4 class="add">Shipping Address</h4>
{{#if order.addressSnapshot}}
<p>{{order.addressSnapshot.houseNumber}}, {{order.addressSnapshot.street}},
   {{order.addressSnapshot.city}}, {{order.addressSnapshot.zipcode}}, {{order.addressSnapshot.country}}</p>
{{else}}
<p>{{order.address.place}}, {{order.address.houseNumber}}, {{order.address.street}},
   {{order.address.city}}, {{order.address.zipcode}}, {{order.address.country}}</p>
{{/if}}
                            <h4 class="add">Payment Method</h4>
                            <p>{{order.paymentMethod}}</p>
                            <h4 class="add">Payment Status</h4>
                            <p>{{order.paymentStatus}}</p>
                            {{#ifCond order.orderStatus '===' 'Pending'}}
                            <a class="btn btn-primary" id="cancelOrderBtn">Cancel Order</a>
                            {{/ifCond}}

                            {{#ifCond order.orderStatus '===' 'Processing'}}
                            <a class="btn btn-primary" id="cancelOrderBtn">Cancel Order</a>
                            {{/ifCond}}

                            {{#ifCond order.orderStatus '===' 'Delivered'}}
                            <a class="btn btn-main btn-small" href="/orders/{{order._id}}/return">Return Order</a>
                            {{/ifCond}}

                            {{#if (or (eq order.paymentMethod 'Wallet') (eq order.paymentMethod 'Razorpay') (eq this.paymentMethod 'COD') (eq order.orderStatus 'Delivered'))}}
                        <a class="btn btn-main btn-small" href="/orders/{{order._id}}/invoice">Download Invoice</a>
                        {{/if}}

                        {{!-- Retry Payment button only if the paymentStatus is Failed --}}
{{#ifCond order.paymentStatus '===' 'Failed'}}
<a class="btn btn-primary" id="retryPaymentBtn">Retry Payment</a>
{{/ifCond}}


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Cancel Order
    document.getElementById('cancelOrderBtn').addEventListener('click', function () {
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to cancel this order?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/orders/{{order._id}}/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(response => {
                    return response.json().then(data => {
                        if (response.ok) {
                            Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success').then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire('Error!', data.message || 'There was a problem cancelling your order.', 'error');
                        }
                    });
                }).catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                });
            }
        });
    });
</script>
<script>
    // Retry Payment
    document.getElementById('retryPaymentBtn').addEventListener('click', function () {
        Swal.fire({
            title: 'Retry Payment?',
            text: "Your payment has failed. Would you like to retry?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, retry!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Initiate Razorpay payment with the existing order
                fetch('/orders/{{order._id}}/retry-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(response => {
                    return response.json().then(data => {
                        if (response.ok) {
                            // Razorpay Checkout retry with the existing Razorpay order ID
                            var options = {
                                "key": data.razorpayKeyId,
                                "amount": data.totalAmount,
                                "currency": "INR",
                                "name": "Your Store",
                                "description": "Order #{{order._id}}",
                                "order_id": data.razorpayOrderId,
                                "handler": function (response) {
                                    // First, verify payment with Razorpay before confirming
                                    fetch('/api/verify-payment', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            razorpay_payment_id: response.razorpay_payment_id,
                                            razorpay_order_id: response.razorpay_order_id,
                                            razorpay_signature: response.razorpay_signature
                                        })
                                    }).then(response => {
                                        return response.json().then(verifyData => {
                                            if (response.ok && verifyData.success) {
                                                Swal.fire('Success!', 'Payment verified and confirmed!', 'success').then(() => {
                                                    // Redirect to order summary page
                                                    window.location.href = '/orders/{{order._id}}';
                                                });
                                            } else {
                                                Swal.fire('Error!', 'Payment verification failed.', 'error');
                                            }
                                        });
                                    }).catch(error => {
                                        Swal.fire('Error!', 'An unexpected error occurred during payment verification.', 'error');
                                    });
                                },
                                "prefill": {
                                    "name": "{{user.name}}",
                                    "email": "{{user.email}}",
                                    "contact": "{{user.contact}}"
                                },
                                "theme": {
                                    "color": "#F37254"
                                }
                            };

                            var rzp = new Razorpay(options);
                            rzp.open();
                        } else {
                            Swal.fire('Error!', data.message || 'There was a problem retrying the payment.', 'error');
                        }
                    });
                }).catch(error => {
                    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                });
            }
        });
    });
</script>












